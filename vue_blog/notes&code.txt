TODO: Home.vue EKS 1 
<template>
  <div class="home">
    <h1>home</h1>
    <p>my name is {{ name }} and i am {{ age }}</p>
    <button @click="handleClick">Click me</button>
    <button @click="age++">Add 1 to age</button>
    <input type="text" v-model="name" />
  </div>
</template>

<script>
import { ref } from "@vue/reactivity";
// @ is an alias to /src

export default {
  // this can't be accessed inside the setup()
  name: "Home",
  components: {},
  // setup metoden kører før alle andre metoder som methods, computed, mounted osv
  // setup isn't reactive as a default
  // by using ref we make the elements inside setup reactive
  setup() {
    // const p = ref(null);

    const name = ref("mario");
    const age = ref(30);

    // to get access to the function handling the click we must return it down in return
    // const handleClick = () => {
    //   console.log(p, p.value);
    //   p.value.classList.add("test");
    //   p.value.textContent = "Hello Andos";
    // };
    const handleClick = () => {
      name.value = "luigi";
      age.value = 20;
    };

    return { name: name, age: age, handleClick };
  },

  // the value in this data method is different from the setup method. The difference is that data inside the data method is reactive,
  // which means that if the value in the variable changes, so will the value that is called in the template area
  // --> The setup values are not reactive, which means that if the values change in the setup method they wont change in the template area

  data() {
    return {
      // age: 40,
    };
  },
};
</script>

  components: {},
  setup() {
    const ninjaOne = ref({ name: "mario", age: 30 });
    const ninjaTwo = reactive({ name: "luigi", age: 35 });

    const updateNinjaOne = () => {
      ninjaOne.value.age = 40;
    };

    const updateNinjaTwo = () => {
      ninjaTwo.age = 40;
    };

    return { ninjaOne, updateNinjaOne, ninjaTwo, updateNinjaTwo };
  },